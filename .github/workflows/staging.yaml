name: Jabar Super Apps Web Staging

on:
  push:
    branches: [ development ]

jobs:
  docker:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

        # Configure Docker with Credentials
      - name: Configure Docker
        run: |
          docker login ${{ secrets.REGISTRY_URL }} -u ${{ secrets.REGISTRY_USERNAME }} -p '${{ secrets.REGISTRY_PASSWORD }}'
        # Set version tag using SHA Hash (short)
      - name: Set version tag
        id: vars
        run: echo "::set-output name=sha_short::$(git rev-parse --short HEAD)"

        # Build the Docker image
      - name: Build and push
        uses: docker/build-push-action@v2
        with:
          context: .
          file: Dockerfile
          push: true
          tags: ${{ secrets.SERVICE_IMAGENAME_STAGING }}:${{ steps.vars.outputs.sha_short }}-test
          build-args: |
            API_KEY=${{ secrets.API_KEY_STAGING }}
            SENTRY_DSN=${{ secrets.SENTRY_DSN }}
            SENTRY_ENABLED=${{ secrets.SENTRY_ENABLED }}
            SENTRY_SAMPLE_RATE=${{ secrets.SENTRY_SAMPLE_RATE }}
            GOOGLE_ANALYTICS_ID=${{secrets.GOOGLE_ANALYTICS_ID_STAGING}}
            NEW_RELIC_APP_NAME=${{secrets.NEW_RELIC_APP_NAME_STAGING}}
            NEW_RELIC_LICENSE_KEY=${{secrets.NEW_RELIC_LICENSE_KEY}}
            NEW_RELIC_ACCOUNT_ID=${{secrets.NEW_RELIC_ACCOUNT_ID}}
            NEW_RELIC_BROWSER_LICENSE_KEY=${{secrets.NEW_RELIC_BROWSER_LICENSE_KEY}}
            NEW_RELIC_APPLICATION_ID=${{secrets.NEW_RELIC_APPLICATION_ID_STAGING}}
            BASE_URL_ADUAN=${{secrets.BASE_URL_ADUAN}}
            USERNAME_URL_ADUAN=${{secrets.USERNAME_URL_ADUAN}}
            PASSWORD_URL_ADUAN=${{secrets.PASSWORD_URL_ADUAN}}
            URL_MAIN_SERVICE=${{secrets.URL_MAIN_SERVICE}}
      # GitOps
      - name: GitOps ArgoCD Setup
        run: |
          echo "${{ secrets.GITLAB_ARGOCD_KEY }}" > /tmp/gitlab-deploy-ssh-key
          chmod 600 /tmp/gitlab-deploy-ssh-key
          export GIT_SSH_COMMAND="ssh -i /tmp/gitlab-deploy-ssh-key -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no"
          git clone ${{ secrets.GITLAB_ARGOCD_REPOSITORY }}
      - name: GitOps ArgoCD Update Image Tag
        uses: mikefarah/yq@master
        with:
          cmd: yq -i '.spec.template.spec.containers[0].image = "${{ secrets.SERVICE_IMAGENAME_STAGING }}:${{ steps.vars.outputs.sha_short }}-test"' 'jds-terraform-gke/k8s/superapp/development/web/deployment.yaml'

      - name: GitOps ArgoCD Create Branch, Commit, Push
        run: |
          export GIT_SSH_COMMAND="ssh -i /tmp/gitlab-deploy-ssh-key -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no"
          cd jds-terraform-gke/k8s/superapp/development/web
          git config user.email "github-action@github.com"
          git config user.name "Github Action"
          git checkout master
          git add deployment.yaml
          git commit -m "chore: update superapp web images ${{ steps.vars.outputs.sha_short }}-test to staging"
          git push origin master
